// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `dataset.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct DataItem {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DataItem {
    fn default() -> &'a DataItem {
        <DataItem as ::protobuf::Message>::default_instance()
    }
}

impl DataItem {
    pub fn new() -> DataItem {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DataItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataItem {
        DataItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &DataItem| { &m.keys },
                |m: &mut DataItem| { &mut m.keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DataItem>(
                "DataItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DataItem {
        static instance: ::protobuf::rt::LazyV2<DataItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DataItem::new)
    }
}

impl ::protobuf::Clear for DataItem {
    fn clear(&mut self) {
        self.keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DataItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDatasetRequest {
    // message fields
    pub field_type: CreateDatasetRequest_FileType,
    pub keys: ::protobuf::RepeatedField<DataItem>,
    pub weights: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDatasetRequest {
    fn default() -> &'a CreateDatasetRequest {
        <CreateDatasetRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateDatasetRequest {
    pub fn new() -> CreateDatasetRequest {
        ::std::default::Default::default()
    }

    // .CreateDatasetRequest.FileType type = 1;


    pub fn get_field_type(&self) -> CreateDatasetRequest_FileType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = CreateDatasetRequest_FileType::FILESYSTEM;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: CreateDatasetRequest_FileType) {
        self.field_type = v;
    }

    // repeated .DataItem keys = 2;


    pub fn get_keys(&self) -> &[DataItem] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<DataItem>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<DataItem> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<DataItem> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 weights = 3;


    pub fn get_weights(&self) -> &[u32] {
        &self.weights
    }
    pub fn clear_weights(&mut self) {
        self.weights.clear();
    }

    // Param is passed by value, moved
    pub fn set_weights(&mut self, v: ::std::vec::Vec<u32>) {
        self.weights = v;
    }

    // Mutable pointer to the field.
    pub fn mut_weights(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.weights
    }

    // Take field
    pub fn take_weights(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.weights, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateDatasetRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.weights)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != CreateDatasetRequest_FileType::FILESYSTEM {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.weights {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != CreateDatasetRequest_FileType::FILESYSTEM {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        for v in &self.keys {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.weights {
            os.write_uint32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDatasetRequest {
        CreateDatasetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CreateDatasetRequest_FileType>>(
                "type",
                |m: &CreateDatasetRequest| { &m.field_type },
                |m: &mut CreateDatasetRequest| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DataItem>>(
                "keys",
                |m: &CreateDatasetRequest| { &m.keys },
                |m: &mut CreateDatasetRequest| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weights",
                |m: &CreateDatasetRequest| { &m.weights },
                |m: &mut CreateDatasetRequest| { &mut m.weights },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateDatasetRequest>(
                "CreateDatasetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateDatasetRequest {
        static instance: ::protobuf::rt::LazyV2<CreateDatasetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDatasetRequest::new)
    }
}

impl ::protobuf::Clear for CreateDatasetRequest {
    fn clear(&mut self) {
        self.field_type = CreateDatasetRequest_FileType::FILESYSTEM;
        self.keys.clear();
        self.weights.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDatasetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDatasetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CreateDatasetRequest_FileType {
    FILESYSTEM = 0,
    LMDB = 1,
}

impl ::protobuf::ProtobufEnum for CreateDatasetRequest_FileType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CreateDatasetRequest_FileType> {
        match value {
            0 => ::std::option::Option::Some(CreateDatasetRequest_FileType::FILESYSTEM),
            1 => ::std::option::Option::Some(CreateDatasetRequest_FileType::LMDB),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CreateDatasetRequest_FileType] = &[
            CreateDatasetRequest_FileType::FILESYSTEM,
            CreateDatasetRequest_FileType::LMDB,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CreateDatasetRequest_FileType>("CreateDatasetRequest.FileType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CreateDatasetRequest_FileType {
}

impl ::std::default::Default for CreateDatasetRequest_FileType {
    fn default() -> Self {
        CreateDatasetRequest_FileType::FILESYSTEM
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDatasetRequest_FileType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateDatasetResponse {
    // message fields
    pub dataset_id: u32,
    pub rsp: Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDatasetResponse {
    fn default() -> &'a CreateDatasetResponse {
        <CreateDatasetResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateDatasetResponse {
    pub fn new() -> CreateDatasetResponse {
        ::std::default::Default::default()
    }

    // uint32 dataset_id = 1;


    pub fn get_dataset_id(&self) -> u32 {
        self.dataset_id
    }
    pub fn clear_dataset_id(&mut self) {
        self.dataset_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_dataset_id(&mut self, v: u32) {
        self.dataset_id = v;
    }

    // .Status rsp = 2;


    pub fn get_rsp(&self) -> Status {
        self.rsp
    }
    pub fn clear_rsp(&mut self) {
        self.rsp = Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_rsp(&mut self, v: Status) {
        self.rsp = v;
    }
}

impl ::protobuf::Message for CreateDatasetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dataset_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rsp, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dataset_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dataset_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.rsp != Status::Ok {
            my_size += ::protobuf::rt::enum_size(2, self.rsp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dataset_id != 0 {
            os.write_uint32(1, self.dataset_id)?;
        }
        if self.rsp != Status::Ok {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.rsp))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDatasetResponse {
        CreateDatasetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dataset_id",
                |m: &CreateDatasetResponse| { &m.dataset_id },
                |m: &mut CreateDatasetResponse| { &mut m.dataset_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                "rsp",
                |m: &CreateDatasetResponse| { &m.rsp },
                |m: &mut CreateDatasetResponse| { &mut m.rsp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateDatasetResponse>(
                "CreateDatasetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateDatasetResponse {
        static instance: ::protobuf::rt::LazyV2<CreateDatasetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDatasetResponse::new)
    }
}

impl ::protobuf::Clear for CreateDatasetResponse {
    fn clear(&mut self) {
        self.dataset_id = 0;
        self.rsp = Status::Ok;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateDatasetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDatasetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteDatasetRequest {
    // message fields
    pub dataset_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteDatasetRequest {
    fn default() -> &'a DeleteDatasetRequest {
        <DeleteDatasetRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteDatasetRequest {
    pub fn new() -> DeleteDatasetRequest {
        ::std::default::Default::default()
    }

    // uint32 dataset_id = 1;


    pub fn get_dataset_id(&self) -> u32 {
        self.dataset_id
    }
    pub fn clear_dataset_id(&mut self) {
        self.dataset_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_dataset_id(&mut self, v: u32) {
        self.dataset_id = v;
    }
}

impl ::protobuf::Message for DeleteDatasetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.dataset_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.dataset_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.dataset_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.dataset_id != 0 {
            os.write_uint32(1, self.dataset_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteDatasetRequest {
        DeleteDatasetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "dataset_id",
                |m: &DeleteDatasetRequest| { &m.dataset_id },
                |m: &mut DeleteDatasetRequest| { &mut m.dataset_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteDatasetRequest>(
                "DeleteDatasetRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteDatasetRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteDatasetRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteDatasetRequest::new)
    }
}

impl ::protobuf::Clear for DeleteDatasetRequest {
    fn clear(&mut self) {
        self.dataset_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteDatasetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteDatasetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteDatasetResponse {
    // message fields
    pub rsp: Status,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteDatasetResponse {
    fn default() -> &'a DeleteDatasetResponse {
        <DeleteDatasetResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteDatasetResponse {
    pub fn new() -> DeleteDatasetResponse {
        ::std::default::Default::default()
    }

    // .Status rsp = 2;


    pub fn get_rsp(&self) -> Status {
        self.rsp
    }
    pub fn clear_rsp(&mut self) {
        self.rsp = Status::Ok;
    }

    // Param is passed by value, moved
    pub fn set_rsp(&mut self, v: Status) {
        self.rsp = v;
    }
}

impl ::protobuf::Message for DeleteDatasetResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.rsp, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.rsp != Status::Ok {
            my_size += ::protobuf::rt::enum_size(2, self.rsp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.rsp != Status::Ok {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.rsp))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteDatasetResponse {
        DeleteDatasetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Status>>(
                "rsp",
                |m: &DeleteDatasetResponse| { &m.rsp },
                |m: &mut DeleteDatasetResponse| { &mut m.rsp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteDatasetResponse>(
                "DeleteDatasetResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteDatasetResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteDatasetResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteDatasetResponse::new)
    }
}

impl ::protobuf::Clear for DeleteDatasetResponse {
    fn clear(&mut self) {
        self.rsp = Status::Ok;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteDatasetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteDatasetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Status {
    Ok = 0,
    False = 1,
}

impl ::protobuf::ProtobufEnum for Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Status> {
        match value {
            0 => ::std::option::Option::Some(Status::Ok),
            1 => ::std::option::Option::Some(Status::False),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Status] = &[
            Status::Ok,
            Status::False,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Status>("Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Status {
}

impl ::std::default::Default for Status {
    fn default() -> Self {
        Status::Ok
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rdataset.proto\"\x1e\n\x08DataItem\x12\x12\n\x04keys\x18\x01\x20\x03(\
    \tR\x04keys\"\xa9\x01\n\x14CreateDatasetRequest\x122\n\x04type\x18\x01\
    \x20\x01(\x0e2\x1e.CreateDatasetRequest.FileTypeR\x04type\x12\x1d\n\x04k\
    eys\x18\x02\x20\x03(\x0b2\t.DataItemR\x04keys\x12\x18\n\x07weights\x18\
    \x03\x20\x03(\rR\x07weights\"$\n\x08FileType\x12\x0e\n\nFILESYSTEM\x10\0\
    \x12\x08\n\x04LMDB\x10\x01\"Q\n\x15CreateDatasetResponse\x12\x1d\n\ndata\
    set_id\x18\x01\x20\x01(\rR\tdatasetId\x12\x19\n\x03rsp\x18\x02\x20\x01(\
    \x0e2\x07.StatusR\x03rsp\"5\n\x14DeleteDatasetRequest\x12\x1d\n\ndataset\
    _id\x18\x01\x20\x01(\rR\tdatasetId\"2\n\x15DeleteDatasetResponse\x12\x19\
    \n\x03rsp\x18\x02\x20\x01(\x0e2\x07.StatusR\x03rsp*\x1b\n\x06Status\x12\
    \x06\n\x02Ok\x10\0\x12\t\n\x05False\x10\x012\x89\x01\n\x07Dataset\x12>\n\
    \rCreateDataset\x12\x15.CreateDatasetRequest\x1a\x16.CreateDatasetRespon\
    se\x12>\n\rDeleteDataset\x12\x15.DeleteDatasetRequest\x1a\x16.DeleteData\
    setResponseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
