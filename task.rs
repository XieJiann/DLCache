// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `protos/task.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct CreateTaskRequest {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub weights: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTaskRequest {
    fn default() -> &'a CreateTaskRequest {
        <CreateTaskRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateTaskRequest {
    pub fn new() -> CreateTaskRequest {
        ::std::default::Default::default()
    }

    // repeated string keys = 2;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated int32 weights = 3;


    pub fn get_weights(&self) -> &[i32] {
        &self.weights
    }
    pub fn clear_weights(&mut self) {
        self.weights.clear();
    }

    // Param is passed by value, moved
    pub fn set_weights(&mut self, v: ::std::vec::Vec<i32>) {
        self.weights = v;
    }

    // Mutable pointer to the field.
    pub fn mut_weights(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.weights
    }

    // Take field
    pub fn take_weights(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.weights, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CreateTaskRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.weights)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.weights {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(2, &v)?;
        };
        for v in &self.weights {
            os.write_int32(3, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTaskRequest {
        CreateTaskRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &CreateTaskRequest| { &m.keys },
                |m: &mut CreateTaskRequest| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "weights",
                |m: &CreateTaskRequest| { &m.weights },
                |m: &mut CreateTaskRequest| { &mut m.weights },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTaskRequest>(
                "CreateTaskRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTaskRequest {
        static instance: ::protobuf::rt::LazyV2<CreateTaskRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTaskRequest::new)
    }
}

impl ::protobuf::Clear for CreateTaskRequest {
    fn clear(&mut self) {
        self.keys.clear();
        self.weights.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTaskRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTaskRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateTaskResponse {
    // message fields
    pub state: CreateTaskResponse_State,
    pub task_id: u64,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateTaskResponse {
    fn default() -> &'a CreateTaskResponse {
        <CreateTaskResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateTaskResponse {
    pub fn new() -> CreateTaskResponse {
        ::std::default::Default::default()
    }

    // .CreateTaskResponse.State state = 1;


    pub fn get_state(&self) -> CreateTaskResponse_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = CreateTaskResponse_State::Ok;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: CreateTaskResponse_State) {
        self.state = v;
    }

    // uint64 task_id = 2;


    pub fn get_task_id(&self) -> u64 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u64) {
        self.task_id = v;
    }

    // string path = 3;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateTaskResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.task_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.state != CreateTaskResponse_State::Ok {
            my_size += ::protobuf::rt::enum_size(1, self.state);
        }
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.state != CreateTaskResponse_State::Ok {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if self.task_id != 0 {
            os.write_uint64(2, self.task_id)?;
        }
        if !self.path.is_empty() {
            os.write_string(3, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateTaskResponse {
        CreateTaskResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CreateTaskResponse_State>>(
                "state",
                |m: &CreateTaskResponse| { &m.state },
                |m: &mut CreateTaskResponse| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "task_id",
                |m: &CreateTaskResponse| { &m.task_id },
                |m: &mut CreateTaskResponse| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CreateTaskResponse| { &m.path },
                |m: &mut CreateTaskResponse| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateTaskResponse>(
                "CreateTaskResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateTaskResponse {
        static instance: ::protobuf::rt::LazyV2<CreateTaskResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateTaskResponse::new)
    }
}

impl ::protobuf::Clear for CreateTaskResponse {
    fn clear(&mut self) {
        self.state = CreateTaskResponse_State::Ok;
        self.task_id = 0;
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateTaskResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTaskResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CreateTaskResponse_State {
    Ok = 0,
    False = 1,
}

impl ::protobuf::ProtobufEnum for CreateTaskResponse_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CreateTaskResponse_State> {
        match value {
            0 => ::std::option::Option::Some(CreateTaskResponse_State::Ok),
            1 => ::std::option::Option::Some(CreateTaskResponse_State::False),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CreateTaskResponse_State] = &[
            CreateTaskResponse_State::Ok,
            CreateTaskResponse_State::False,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CreateTaskResponse_State>("CreateTaskResponse.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CreateTaskResponse_State {
}

impl ::std::default::Default for CreateTaskResponse_State {
    fn default() -> Self {
        CreateTaskResponse_State::Ok
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateTaskResponse_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDataRequest {
    // message fields
    pub task_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDataRequest {
    fn default() -> &'a GetDataRequest {
        <GetDataRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetDataRequest {
    pub fn new() -> GetDataRequest {
        ::std::default::Default::default()
    }

    // uint64 task_id = 1;


    pub fn get_task_id(&self) -> u64 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u64) {
        self.task_id = v;
    }
}

impl ::protobuf::Message for GetDataRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.task_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint64(1, self.task_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDataRequest {
        GetDataRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "task_id",
                |m: &GetDataRequest| { &m.task_id },
                |m: &mut GetDataRequest| { &mut m.task_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDataRequest>(
                "GetDataRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDataRequest {
        static instance: ::protobuf::rt::LazyV2<GetDataRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDataRequest::new)
    }
}

impl ::protobuf::Clear for GetDataRequest {
    fn clear(&mut self) {
        self.task_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDataRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetDataRespones {
    // message fields
    pub address: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetDataRespones {
    fn default() -> &'a GetDataRespones {
        <GetDataRespones as ::protobuf::Message>::default_instance()
    }
}

impl GetDataRespones {
    pub fn new() -> GetDataRespones {
        ::std::default::Default::default()
    }

    // int64 address = 1;


    pub fn get_address(&self) -> i64 {
        self.address
    }
    pub fn clear_address(&mut self) {
        self.address = 0;
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: i64) {
        self.address = v;
    }
}

impl ::protobuf::Message for GetDataRespones {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.address != 0 {
            my_size += ::protobuf::rt::value_size(1, self.address, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.address != 0 {
            os.write_int64(1, self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetDataRespones {
        GetDataRespones::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "address",
                |m: &GetDataRespones| { &m.address },
                |m: &mut GetDataRespones| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetDataRespones>(
                "GetDataRespones",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetDataRespones {
        static instance: ::protobuf::rt::LazyV2<GetDataRespones> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetDataRespones::new)
    }
}

impl ::protobuf::Clear for GetDataRespones {
    fn clear(&mut self) {
        self.address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetDataRespones {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetDataRespones {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11protos/task.proto\"A\n\x11CreateTaskRequest\x12\x12\n\x04keys\x18\
    \x02\x20\x03(\tR\x04keys\x12\x18\n\x07weights\x18\x03\x20\x03(\x05R\x07w\
    eights\"\x8e\x01\n\x12CreateTaskResponse\x12/\n\x05state\x18\x01\x20\x01\
    (\x0e2\x19.CreateTaskResponse.StateR\x05state\x12\x17\n\x07task_id\x18\
    \x02\x20\x01(\x04R\x06taskId\x12\x12\n\x04path\x18\x03\x20\x01(\tR\x04pa\
    th\"\x1a\n\x05State\x12\x06\n\x02Ok\x10\0\x12\t\n\x05False\x10\x01\")\n\
    \x0eGetDataRequest\x12\x17\n\x07task_id\x18\x01\x20\x01(\x04R\x06taskId\
    \"+\n\x0fGetDataRespones\x12\x18\n\x07address\x18\x01\x20\x01(\x03R\x07a\
    ddress2g\n\x04Task\x121\n\x06Create\x12\x12.CreateTaskRequest\x1a\x13.Cr\
    eateTaskResponse\x12,\n\x07GetData\x12\x0f.GetDataRequest\x1a\x10.GetDat\
    aResponesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
